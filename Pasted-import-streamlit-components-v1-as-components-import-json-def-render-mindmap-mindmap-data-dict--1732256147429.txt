import streamlit.components.v1 as components
import json

def render_mindmap(mindmap_data: dict) -> None:
    """Render the mindmap using a custom HTML/JS component"""
    
    # Escape the JSON to safely embed it in the HTML template
    safe_json = json.dumps(mindmap_data).replace('"', '&quot;')
    
    html_template = f"""
    <div id="mindmap-container" style="width: 100%; height: 700px; background: rgba(255, 255, 255, 0.1); border-radius: 10px;">
        <style>
            /* Base node styles */
            .node {{
                margin: 5px;
                cursor: pointer;
                transition: all 0.3s ease;
                transform-origin: center;
            }}
            .node rect {{
                fill: rgba(255, 255, 255, 0.9);
                rx: 8;
                ry: 8;
                stroke: rgba(0, 0, 0, 0.1);
                stroke-width: 1;
                filter: drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1));
            }}
            .node text {{
                font-size: 14px;
                fill: #333;
                font-family: "Helvetica Neue", Arial, sans-serif;
                dominant-baseline: middle;
            }}
            .connection {{
                stroke: rgba(150, 150, 150, 0.6);
                stroke-width: 2px;
                transition: stroke-width 0.3s ease;
            }}
        </style>
        <script src="https://d3js.org/d3.v7.min.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function() {{
                const mindmapData = JSON.parse(`{safe_json}`);
                const width = document.getElementById('mindmap-container').offsetWidth;
                const height = 700;

                const tree = d3.tree()
                    .size([height, width - 160])
                    .separation((a, b) => (a.parent == b.parent ? 1 : 2));

                const root = d3.hierarchy(mindmapData);

                const svg = d3.select('#mindmap-container')
                    .append('svg')
                    .attr('width', width)
                    .attr('height', height);

                const container = svg.append('g')
                    .attr('transform', 'translate(80, 50)');

                const nodes = tree(root);

                const link = container.selectAll('.connection')
                    .data(nodes.links())
                    .join('path')
                    .attr('class', 'connection')
                    .attr('d', d3.linkHorizontal()
                        .x(d => d.y)
                        .y(d => d.x));

                const node = container.selectAll('.node')
                    .data(nodes.descendants())
                    .join('g')
                    .attr('class', 'node')
                    .attr('transform', d => `translate(${d.y},${d.x})`);

                node.append('rect')
                    .attr('width', d => Math.max(100, d.data.text.length * 8))
                    .attr('height', 30)
                    .attr('x', d => -Math.max(100, d.data.text.length * 8) / 2)
                    .attr('y', -15)
                    .attr('rx', 6)
                    .attr('ry', 6);

                node.append('text')
                    .text(d => d.data.text)
                    .attr('text-anchor', 'middle')
                    .attr('dy', '0.35em');
            }});
        </script>
    </div>
    """

    # Render the component
    components.html(
        html_template,
        height=750,
        scrolling=True
    )
